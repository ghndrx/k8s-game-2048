name: Deploy to Staging

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy (default: latest)'
        required: false
        default: 'latest'
  workflow_run:
    workflows: ["Deploy to Development"]
    types:
      - completed
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set image tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          IMAGE_TAG="${{ github.event.inputs.image_tag || 'latest' }}"
        else
          # For auto-promotion, use the latest successful build
          IMAGE_TAG="main-$(echo "${{ github.sha }}" | cut -c1-7)"
        fi
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "Deploying image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"

    - name: Deploy to staging via webhook
      run: |
        echo "🚀 Triggering webhook deployment to staging..."
        
        # Prepare deployment payload
        PAYLOAD=$(cat <<EOF
        {
          "environment": "staging",
          "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}",
          "namespace": "game-2048-staging",
          "service_name": "game-2048-staging",
          "deployment_id": "${{ github.run_id }}-${{ github.run_attempt }}",
          "commit_sha": "${{ github.sha }}",
          "triggered_by": "${{ github.actor }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "auto_promotion": "${{ github.event_name == 'workflow_run' }}"
        }
        EOF
        )
        
        # Generate HMAC signature for webhook security
        SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "${{ secrets.WEBHOOK_SECRET }}" -binary | base64)
        
        # Send webhook
        HTTP_CODE=$(curl -s -o /tmp/webhook_response.json -w "%{http_code}" \
          -X POST \
          -H "Content-Type: application/json" \
          -H "X-Signature-SHA256: sha256=$SIGNATURE" \
          -H "X-GitHub-Event: deployment" \
          -H "X-GitHub-Delivery: ${{ github.run_id }}" \
          -d "$PAYLOAD" \
          "${{ secrets.STAGING_WEBHOOK_URL }}")
        
        echo "Webhook response code: $HTTP_CODE"
        cat /tmp/webhook_response.json || echo "No response body"
        
        if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
          echo "✅ Webhook deployment triggered successfully!"
        else
          echo "❌ Webhook deployment failed with code: $HTTP_CODE"
          exit 1
        fi

    - name: Wait for deployment to complete
      run: |
        echo "⏳ Waiting for deployment to stabilize..."
        sleep 45

    - name: Health check
      run: |
        echo "🏥 Performing health check..."
        MAX_RETRIES=10
        RETRY_COUNT=0
        
        # Get the canonical Knative domain for health check
        HEALTH_URL="https://game-2048-staging.game-2048-staging.${{ secrets.KNATIVE_DOMAIN }}"
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES - Checking: $HEALTH_URL"
          
          if curl -f -s --max-time 10 "$HEALTH_URL" > /dev/null; then
            echo "✅ Health check passed!"
            echo "🌐 Application is available at: $HEALTH_URL"
            exit 0
          else
            echo "⚠️ Health check failed, retrying in 15 seconds..."
            sleep 15
            RETRY_COUNT=$((RETRY_COUNT + 1))
          fi
        done
        
        echo "❌ Health check failed after $MAX_RETRIES attempts"
        echo "The deployment webhook was sent successfully, but the service is not responding"
        echo "Please check your cluster logs for deployment issues"
        exit 1

    - name: Deployment summary
      if: always()
      run: |
        echo "## 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Staging" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Method:** Webhook-based" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          echo "- **Type:** Auto-promotion from Development" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Type:** Manual deployment" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "- **Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** https://game-2048-staging.game-2048-staging.${{ secrets.KNATIVE_DOMAIN }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
        fi
